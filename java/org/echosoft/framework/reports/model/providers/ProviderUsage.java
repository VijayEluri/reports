package org.echosoft.framework.reports.model.providers;

/**
 * Определяет режимы использования поставщиков данных в секциях отчетов.
 *
 * @author Anton Sharapov
 */
public enum ProviderUsage {

    /**
     * Используется по умолчанию.
     * <p><strong>начало обработки секции:</strong>
     * <ol>
     *  <li> Получаем ссылку на требуемого поставщика данных
     *  <li> Обращаясь к поставщику данных получаем курсор позволяющий нам итерироваться по всем записям возвращаемым поставщиком. Ассоциируем данный курсор с контекстом исполнения секции.
     *  <li> Читаем первую запись из полученного курсора.
     *  <ul>
     *   <li> В случае успеха ассоциируем ее с контекстом исполнения секции и начинаем обработку тела секции.
     *   <li> В случае если в курсоре нет данных то завершаем обработку тела секции.
     *  </ul>
     * </ol></p>
     * <p><strong>завершение обработки тела секции:</strong>
     * <ol>
     *  <li> Читаем из курсора очередную запись.
     *  <ul>
     *   <li> В случае успеха ассоциируем ее с контекстом исполнения секции и начинаем обработку тела секции заново.
     *   <li> В случае если в курсоре больше нет данных то завершаем обработку тела секции.
     *  </ul>
     * </ol></p>
     * <p><strong>завершение обработки секции:</strong>
     * <ol>
     *  <li> Освобождаются все ресурсы связанные с курсором полученным от поставщика данных.
     * </ol></p>
     * <p><strong>ВАЖНО!</strong>
     *  Количество повторов тела секции может быть меньшим количества записей возвращаемых поставщиком данных в случае составных секций
     *  когда у них есть дочерние секции подключенные к тому же курсору данных посредством использования т.н. логических источников данных - {@link FilteredDataProvider}.
     * </p>
     */
    STANDARD,

    /**
     * Имеет смысл исключительно в составных секциях.
     * <p><strong>начало обработки секции:</strong>
     * <ol>
     *  <li> Получаем ссылку на требуемого поставщика данных
     *  <li> Обращаясь к поставщику данных получаем курсор позволяющий нам итерироваться по всем записям возвращаемым поставщиком. Ассоциируем данный курсор с контекстом исполнения секции.
     *  <li> Начинаем безусловную обработку тела секции вне зависимости от того возвращает ли курсор хотя бы одну запись.
     * </ol></p>
     * <p><strong>завершение обработки тела секции:</strong>
     * <ol>
     *  <li> Завершаем обработку секции.
     * </ol></p>
     * <p><strong>завершение обработки секции:</strong>
     * <ol>
     *  <li> Освобождаются все ресурсы связанные с курсором полученным от поставщика данных.
     * </ol></p>
     * <p><strong>ВАЖНО!</strong>
     * Данный режим дает нам возможность единожды инициализировав курсор в составной секции, использовать затем данные из него в дочерних секциях
     * посредством т.н. логических источников данных {@link FilteredDataProvider}.
     * Важным отличием данного режима от {@link #STANDARD} является то что абсолютно ВСЕ записи этого курсора доступны производным от него поставщикам.
     * Если бы мы открывали курсор в режиме {@link #STANDARD} то производным от него поставщикам будут доступны все записи кроме первой 
     * (уже прочитанной при открытии родительской секции).
     * </p>
     */
    DECLARE_ONLY,

    /**
     * Имеет смысл исключительно в составных секциях.
     * <p><strong>начало обработки секции:</strong>
     * <ol>
     *  <li> Получаем ссылку на требуемого поставщика данных
     *  <li> Обращаясь к поставщику данных получаем курсор позволяющий нам итерироваться по всем записям возвращаемым поставщиком. Ассоциируем данный курсор с контекстом исполнения секции.
     *  <li> Подсматриваем первую запись из полученного набора данных не перемещая курсор на следующую запись
     *  <ul>
     *   <li> В случае успеха ассоциируем эту запись с контекстом исполнения секции и начинаем обработку тела секции.
     *   <li> В случае если в курсоре нет данных то завершаем обработку тела секции.
     *  </ul>
     * </ol></p>
     * <p><strong>завершение обработки тела секции:</strong>
     * <ol>
     *  <li> Подсматриваем очередную запись из источника данных
     *  <ul>
     *   <li> В случае успеха ассоциируем ее с контекстом исполнения секции и начинаем обработку тела секции заново.
     *   <li> В случае если в курсоре больше нет данных то завершаем обработку тела секции.
     *  </ul>
     * </ol></p>
     * <p><strong>завершение обработки секции:</strong>
     * <ol>
     *  <li> Освобождаются все ресурсы связанные с курсором полученным от поставщика данных.
     * </ol></p>
     * <p><strong>ВАЖНО!</strong>
     *  <p>
     *   Поскольку обработчик данной секции сам не перемещает курсор в источнике данных то необходимо это выполнять где-то в дочерних секциях иначе у нас получится бесконечный цикл.
     *  </p>
     */
    PREFETCH_RECORDS
}
